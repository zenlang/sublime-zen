# [PackageDev] target_format: plist, ext: tmLanguage

name: Zen
scopeName: source.zen
fileTypes:
  - zen

patterns:
  - include: '#main'

repository:
  field_decl:
    begin: '([a-zA-Z_]\w*|@\".+\")\s*(:)\s*'
    beginCaptures:
      '1':
        name: variable.other.member.zen
      '2':
        name: punctuation.terminator.zen

    contentName: storage.type.zen

    end: '(?:(,)|(?:\n|\r))'
    endCaptures:
      '1':
        name: punctuation.separator.zen

    patterns:
      - include: '#main'

  param_list:
    begin: '(comptime|noalias)?\s*([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")\s*(:)\s*'
    beginCaptures:
      '1':
        name: storage.modifier.zen
      '2':
        name: variable.parameter.zen
      '3':
        name: punctuation.terminator.zen
    
    contentName: storage.type.zen

    end: '(?:(,)|(?:\)))'
    endCaptures:
      '1':
        name: punctuation.separator.zen
      '2':
        name: punctuation.section.parens.end.zen

    patterns:
      - include: '#main'

  character_escapes:
    patterns:
      - name: constant.character.escape.newline.zen
        match: \\n
      - name: constant.character.escape.carrigereturn.zen
        match: \\r
      - name: constant.character.escape.tabulator.zen
        match: \\t
      - name: constant.character.escape.backslash.zen
        match: \\\\
      - name: constant.character.escape.single-quote.zen
        match: \\'
      - name: constant.character.escape.double-quote.zen
        match: \\\"
      - name: constant.character.escape.hexidecimal.zen
        match: \\x[a-fA-F0-9]{2}
      - name: constant.character.escape.hexidecimal.zen
        match: \\u\{[a-fA-F0-9]{1,6}\}

  storage_modifier:
    name: storage.modifier.zen
    match: '\b(const|var|extern|packed|export|pub|noalias|inline|comptime|volatile|align|linksection|threadlocal|allowzero|vtable|deprecated|callconv|mut)\b'

  container_decl:
    patterns:
      - begin: '(?:([a-zA-Z_]\w*|@\".+\")\s*=\s*)?\b(packed|extern)?\b\s*(union\b)(?:(\()([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")(\)))?\s*({)'
        beginCaptures:
          '1':
            name: entity.name.union.zen
          '2':
            name: storage.modifier.zen
          '3':
            name: storage.type.union.zen
          '4':
            name: punctuation.section.parens.begin.zen
          '5':
            name: storage.type.zen
          '6':
            name: punctuation.section.parens.end.zen
          '7':
            name: punctuation.section.braces.begin.zen

        contentName: meta.union

        end: '(})'
        endCaptures:
          '1':
            name: punctuation.section.braces.end.zen

        patterns:
          - include: '#main'

      - begin: '(?:([a-zA-Z_]\w*|@\".+\")\s*=\s*)?\b(packed|extern)?\b\s*(struct)\s*({)'
        beginCaptures:
          '1':
            name: entity.name.struct.zen
          '2':
            name: storage.modifier.zen
          '3':
            name: storage.type.struct.zen
          '4':
            name: punctuation.section.braces.begin.zen

        contentName: meta.struct.zen

        end: '(})'
        endCaptures:
          '1':
            name: punctuation.section.braces.end.zen

        patterns:
          - include: '#main'

      - begin: '(?:([a-zA-Z_]\w*|@\".+\")\s*=\s*)?\s*(interface)\s*({)'
        beginCaptures:
          '1':
            name: entity.name.interface.zen
          '2':
            name: storage.modifier.zen
          '4':
            name: punctuation.section.braces.begin.zen

        contentName: meta.interface.zen

        end: '(})'
        endCaptures:
          '1':
            name: punctuation.section.braces.end.zen

        patterns:
          - include: '#main'

      - begin: '(?:([a-zA-Z_]\w*|@\".+\")\s*=\s*)?\b(extern)?\b\s*(enum\b)(?:(\()([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")(\)))?\s*({)'
        beginCaptures:
          '1':
            name: entity.name.enum.zen
          '2':
            name: storage.modifier.zen
          '3':
            name: storage.type.enum.zen
          '4':
            name: punctuation.section.parens.begin.zen
          '5':
            name: storage.type.zen
          '6':
            name: punctuation.section.parens.end.zen
          '7':
            name: punctuation.section.braces.begin.zen

        contentName: meta.enum.zen

        end: '(})'
        endCaptures:
          '1':
            name: punctuation.section.braces.end.zen

        patterns:
          - include: '#main'

      - begin: '(?:([a-zA-Z_]\w*|@\".+\")\s*=\s*)?\b(error)\b\s*({)'
        beginCaptures:
          '1':
            name: entity.name.error.zen
          '2':
            name: storage.type.error.zen
          '3':
            name: punctuation.section.braces.begin.zen

        contentName: meta.error.zen

        end: '(})'
        endCaptures:
          '1':
            name: punctuation.section.braces.end.zen

        patterns:
          - include: '#main'

      - match: '\b(error)(\.)([a-zA-Z_]\w*|@\".+\")'
        captures:
          '1':
            name: storage.type.error.zen
          '2':
            name: punctuation.accessor.zen
          '3':
            name: entity.name.error.zen
  
  constants:
    patterns:
      - name: constant.language.zen
        match: '\b(null|undefined|true|false)\b'

      - name: constant.numeric.integer.zen
        match: '\b(?<!\.)(-?[0-9]+)(?!\.)\b'

      - name: constant.numeric.integer.hexadecimal.zen
        match: '\b(?<!\.)(0x[a-fA-F0-9]+)(?!\.)\b'

      - name: constant.numeric.integer.octal.zen
        match: '\b(?<!\.)(0o[0-7]+)(?!\.)\b'

      - name: constant.numeric.integer.binary.zen
        match: '\b(?<!\.)(0b[01]+)(?!\.)\b'

      - name: constant.numeric.float.zen
        match: '(?<!\.)(-?\b[0-9]+(?:\.[0-9]+)?(?:[eE][+-]?[0-9]+)?)(?!\.)\b'

      - name: constant.numeric.float.hexadecimal.zen
        match: '(?<!\.)(-?\b0x[a-fA-F0-9]+(?:\.[a-fA-F0-9]+)?[pP]?(?:[+-]?[0-9]+)?)(?!\.)\b'

  comments:
    patterns:
      - name: comment.line.todo.zen
        match: 'TODO'

      - name: comment.line.zen
        begin: '//[^/]'
        end: '$\n?'
        
        patterns:
        - include: '#todo'

      - name: comment.line.documentation.zen
        begin: '///'
        end: '$\n?'

  strings:
    patterns:
      - name: string.quoted.single.zen
        begin: \'
        end: \'
        patterns:
          - include: '#character_escapes'
          - name: invalid.illegal.character.zen
            match: \\[^\'][^\']*?
        
      - name: string.quoted.double.zen
        begin: c?\"
        end: \"
        patterns:
          - include: '#character_escapes'
          - name: invalid.illegal.character.zen
            match: \\[^\'][^\']*?

      - name: string.quoted.other.zen
        begin: c?\\\\
        end: $\n?

  keywords:
    patterns:
    - name: keyword.control.zen
      match: '\b(while|for|break|return|continue|asm|defer|errdefer|unreachable)\b'

    - name: keyword.control.async.zen
      match: '\b(async|await|suspend|resume|cancel|nosuspend)\b'

    - name: keyword.control.conditional.zen
      match: '\b(if|else|switch|try|catch|orelse)\b'

    - name: keyword.control.import.zen
      match: '(?<!\w)(@import|@cImport|@cInclude)\b'

    - name: keyword.other.usingnamespace.zen
      match: '\busingnamespace\b'

    - name: keyword.other.test.zen
      match: '\btest\b'

  operators:
    patterns:
      - name: keyword.operator.zen
        match: '\b!\b'

      - name: keyword.operator.logical.zen
        match: '(==|(?:!|>|<)=?)'

      - name: keyword.operator.word.zen
        match: '\b(and|or)\b'

      - name: keyword.operator.assignment.zen
        match: '((?:(?:\+|-|\*)\%?|/|%|<<|>>|&|\|(?=[^\|])|\^)?=)'

      - name: keyword.operator.arithmetic.zen
        match: '((?:\+|-|(?<=\w)\s*\*)\%?|/(?!/)|%)'

      - name: keyword.operator.bitwise.zen
        match: '(<<|>>|&(?=\W)|\|(?=[^\|])|\^|~)'

      - name: keyword.operator.other.zen
        match: '(\+\+|\*\*|->|\.\?|\.\*|&(?=\w)|\?|\|\||\.\.|\.\.\.)'
  
  support:
    name: support.function.zen
    match: '(?<!\w)@[^\"\d][a-zA-Z_]\w*\b'

  storage:
    patterns:
      - name: storage.type.zen
        match: '\b(bool|void|noreturn|type|anyerror|promise|anyframe|anytype)\b'

      - name: storage.type.integer.zen
        match: '\b(?<!\.)([iu][0-9]\d*|[iu]size|comptime_int)\b'

      - name: storage.type.float.zen
        match: '\b(f16|f32|f64|f128|comptime_float)\b'

      - name: storage.type.c_compat.zen
        match: '\b(c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_longdouble|c_void)\b'

      # - match: '(?:(\*+)\s*(const|allowzero|volatile)\b|(\*+)|(\?+))\s*([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")?'
      #   captures:
      #     '1':
      #       name: keyword.operator.other.zen
      #     '2':
      #       name: storage.modifier.zen
      #     '3':
      #       name: keyword.operator.other.zen
      #     '4':
      #       name: keyword.operator.other.zen
      #     '5':
      #       name: storage.type.zen

  punctuation:
    patterns:
      - name: punctuation.separator.zen
        match: ','

      - name: punctuation.terminator.zen
        match: ';'

      # TODO match variable names?
      # - match: '(?:([a-zA-Z_]\w*|@\".+\")|(?<=\)))(?:(\.)|(,)|(;))'
      #   captures:
      #     '1':
      #       name: variable.other.zen
      #     '2':
      #       name: punctuation.accessor.zen
      #     '3':
      #       name: punctuation.separator.zen
      #     '4':
      #       name: punctuation.terminator.zen
      #     '5':
      #       name: variable.other.zen

      - begin: '(\()'
        beginCaptures:
          '1':
            name: punctuation.section.parens.begin.zen

        contentName: meta.group.zen

        end: '(\))'
        endCaptures:
          '1':
            name: punctuation.section.parens.end.zen

        patterns:
          - include: '#main'

  label:
    patterns:
      - name: entity.name.label.zen
        match: '(?<!\w):([a-zA-Z_]\w*|@\".+\")'

      - begin: '([a-zA-Z_]\w*|@\".+\"):\s*(?:({)|(while|for))'
        beginCaptures:
          '1':
            name: entity.name.label.zen
          '2':
            name: punctuation.section.braces.begin.zen
          '3':
            name: keyword.control.zen

        end: '(})'
        endCaptures:
          '1':
            name: punctuation.section.braces.end.zen

        patterns:
          - include: '#main'

  block:
    begin: '([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")?\s*(\{)'
    beginCaptures:
      '1':
        name: storage.type.zen
      '2':
        name: punctuation.section.braces.begin.zen

    contentName: meta.block.zen

    end: '(\})'
    endCaptures:
      '1':
        name: punctuation.section.braces.end.zen

    patterns:
      - include: '#main'

  func_call:
    begin: '([a-zA-Z_]\w*|@\".+\")(\()'
    beginCaptures:
      '1':
        name: variable.function.zen
      '2':
        name: punctuation.section.parens.begin.zen

    contentName: meta.function-call.zen

    end: '(\))'
    endCaptures:
      '1':
        name: punctuation.section.parens.end.zen

    patterns:
      - include: '#main'
      - match: '(?:(,)|(?:\)))'
        captures:
          '1':
            name: punctuation.separator.zen
          '2':
            name: punctuation.section.parens.end.zen

  main:
    patterns:
      # function pointer types
      - begin: '\b(fn)(\()'
        beginCaptures:
          '1':
            name: storage.type.function.zen
          '2':
            name: punctuation.section.parens.begin.zen

        contentName: meta.parameters.zen

        end: '(\))\s*([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")?'
        endCaptures:
          '1':
            name: punctuation.section.parens.end.zen
          '2':
            name: storage.type.zen

        patterns:
          - match: '([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")(,)?'
            captures:
              '1':
                name: storage.type.zen
              '2':
                name: punctuation.separator.zen

      # function decalaration
      - begin: '\b(fn)\s+([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")(\()'
        beginCaptures:
          '1':
            name: storage.type.function.zen
          '2':
            name: entity.name.function.zen
          '3':
            name: punctuation.section.parens.begin.zen

        contentName: meta.function.parameters.zen

        end: '(?<=\))\s*([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")?'
        endCaptures:
          '1':
            name: storage.type.zen

        patterns:
          - include: '#param_list'

      # variable/constant declaration
      - match: '\b(const|var)\s+([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")\s*(:)\s*([a-zA-Z_][a-zA-Z0-9_.]*|@\".+\")\s*(=)'
        captures:
          '1':
            name: storage.modifier.zen
          '2':
            name: variable.other.zen
          '3':
            name: punctuation.terminator.zen
          '4':
            name: storage.type.zen
          '5':
            name: keyword.operator.assignment.zen

      - include: '#func_call'
      - include: '#label'
      - include: '#punctuation'
      - include: '#storage_modifier'
      - include: '#container_decl'
      - include: '#constants'
      - include: '#comments'
      - include: '#strings'
      - include: '#storage'
      - include: '#keywords'
      - include: '#operators'
      - include: '#support'
      - include: '#field_decl'
      - include: '#block'

